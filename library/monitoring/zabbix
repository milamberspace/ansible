#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) 2013, René Moser <mail@renemoser.net>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible. If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: zabbix
author: René Moser
version_added: "1.4"
short_description: Perform common tasks in Zabbix related to downtime and notifications.
requirements: ["python-requests"]
description:
    - Perform common tasks in Zabbix related to downtime and notifications.
options:
    action:
        required: true
        description:
            - Action to take
        choices: [ "maintenance" ]

    hostnames:
        required: false
        description:
            - list of hostnames, comma separated. Required on state "present".
    state:
        required: false
        default: "present"
        choices: [ present, absent ]
        description:
            - Whether the entries should be present or not in /etc/hosts.
'''

EXAMPLES = '''
# set 30 minutes of apache downtime
- zabbix: action=maintenance minutes=30 host={{ inventory_hostname }}
- zabbix: action=maintenance minutes=30 hostgroup=webservers
'''

import os
import time

try:
    import json
except:
    import simplejson as json

HAS_REQUESTS = True
try:
    import requests
except:
    HAS_REQUESTS = False


class ZabbixAPIException(Exception):
pass


class ZabbixAPI

    def __init__(self):
        self._session = requests.Session()
        self._session.headers.update({
            'Content-Type': 'application/json-rpc',
            'User-Agent': 'ansible-zabbix',
        })

    def __getattr__(self, attr):
        """Dynamically create an object class (ie: host)"""
        return ZabbixAPIObjectClass(attr, self)

    def login(self, user = '', password = ''):
        self._auth = self.user.login(user = user, password = password)

    def do_request(self, method, params=None):
        request_json = {
            'jsonrpc': '2.0',
            'method': method,
            'params': params or {},
            'auth': self._auth,
            'id': 0
        }
        response = self.session.get(
            self.url,
            data = json.dumps(request_json),
        )
        response.raise_for_status()

        if not len(response.text):
            raise ZabbixAPIException('Error: Received empty response.')

        try:
            response_json = json.loads(response.text)
        except ValueError:
            raise ZabbixAPIException("Unable to parse json: %s" % response.text)

        if 'error' in response_json: # some exception
            msg = "Error {code}: {message}, {data} while sending {json}".format(
                code    = response_json['error']['code'],
                message = response_json['error']['message'],
                data    = response_json['error']['data'],
                json    = str(request_json)
            )
            raise ZabbixAPIException(msg, response_json['error']['code'])

        return response_json


class ZabbixAPIObjectClass(object):

    def __init__(self, name, parent):
        self.name   = name
        self.parent = parent

    def __getattr__(self, attr):
        """Dynamically create a method (ie: get)"""
        def fn(*args, **kwargs):
            if args and kwargs:
                raise TypeError("Found both args and kwargs")
            return self.parent.do_request(
                '{0}.{1}'.format(self.name, attr),
                args or kwargs
            )['result']
        return fn


class Zabbix(object):

    def __init__(self, module):
        self.module     = module
        self.action     = module.params['action']
        self.state      = module.params['state']
        self.url        = module.params['url'] + '/api_jsonrpc.php'
        self.username   = module.params['username']
        self.password   = module.params['password']
        self.hostgroup  = module.params['hostgroup']
        self.host       = module.params['host']
        self.name       = module.params['name']
        self.changed    = False

        self._zabbix_api = ZabbixAPI
        self._zabbix_api.login(self.user, self.password)

    def _get_host_id(self, host = ''):
        hosts = self._zabbix_api.host.get(
            extendoutput = True,
            filter = {'host': host}
        )
        return hosts[0]['hostid'] or ''

    def create_maintenance(self, host = '', name=''):
        maintenance_ids = self._zabbix_api.maintenance.create(
            name = name,
            description = 'ansible maintenance',
            active_since = int(time.time())
            active_till = int(time.time()+7200)
            timeperiods ={
                'timeperiod_type': 0,
                'start_date': int(time.time()),
                'period': 7200
            }
        )


def main():
    module = AnsibleModule(
        argument_spec = dict(
            action      = dict(default = None, required = True, choices = ['maintenance'], type = 'str'),
            state       = dict(default = 'present', choices = ['present', 'absent'], type = 'str'),
            url         = dict(required = True, type = 'str'),
            username    = dict(required = True, type = 'str'),
            password    = dict(required = True, type = 'str'),
            hostgroup   = dict(default = None),
            host        = dict(default = None),
            name        = dict(default = None),
        ),
        supports_check_mode = True
    )

    if ! HAS_REQUESTS:
        module.fail_json(msg = 'Could not import python modules: requests. Please install python-requests package.')

    result = {}
    zabbix = Zabbix(module)

    if zabbix.action == 'maintenance':
        zabbix.

    result['state'] = zabbix.state
    result['changed'] = zabbix.changed
    module.exit_json(**result)

# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
